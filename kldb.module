<?php

/**
 * @file
 * Module to make search to library database
 * and showing the result in Drupal page.
 *
 * Last modified: 14.02.2012 Mika Hatakka
 */

/**
 * Implements hook_menu().
 */
function kldb_menu() {
  $items = array();
  $items['admin/settings/kltietokanta'] = array(
    'title' => 'Kymenlaakso-tietokanta',
    'description' => 'Alkutekstin asetus',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kldb_admin_page'),
    'access arguments' => array('administer kymenlaakso db'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['kltietokanta'] = array(
    'title' => 'Haku Kymenlaakso-tietokannasta',
    'description' => 'Haku ja tulossivu',
    'page callback' => 'kldb_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['kltietokanta/klviite'] = array(
    'title' => 'Viitteen tiedot',
    'description' => 'Viitetiedot',
    'page callback' => 'kldb_reference_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implements hook_block().
 */
function kldb_block($op='list', $delta=0) {
  if ($op == "list") {
    // Generate listing of blocks from this module, for the admin/block page
    $block = array();
    $block[0]["info"] = 'Kymenlaakso-tietokanta';
    return $block;
  }
  elseif ($op == 'view') {
    $block['subject'] = 'Kymenlaakso-tietokanta haku';
    $block['content'] = drupal_get_form('kldb_search_form');
    $block['content'] .= check_markup(variable_get('kldb_extra', ''));
    return $block;
  }
}

/**
 * Form components for block
 */
function kldb_search_form() {
  $args = arg();
  $defs = _kldb_create_form_defaults($args);
  drupal_add_css(drupal_get_path('module', 'kldb') . '/kldb.css', 'module', 'all', FALSE);
  // Normal search
  $form['haku']['sana1'] = array(
    '#type' => 'textfield',
    '#title' => 'Vapaatekstihaku',
    '#size' => 25,
    '#default_value' => $defs['sana1'],
    '#attributes' => array('title' => t('Enter the search word(s).')),
  );

  // Advanced search
  $form['haku']['laajennettu'] = array(
    '#type' => 'fieldset',
    '#title' => 'Tarkennettu haku',
    '#collapsible' => TRUE,
    '#collapsed' => $defs['adv_close'],
  );
  $sort_options = array(
    0 => 'Asiasana',
    1 => 'Tekijä',
    2 => 'Nimeke',
    //3 => 'Julkaisija', Query for publisher is not yet known
    4 => 'ISBN',
    5 => 'Sarja',
    6 => 'Vapaasana',
  );
  $form['haku']['laajennettu']['ehto2'] = array(
    '#type' => 'select',
    '#title' => 'Hakuehto 1',
    '#options' => $sort_options,
    '#default_value' => $defs['ehto2'],
  );
  $form['haku']['laajennettu']['sana2'] = array(
    '#type' => 'textfield',
    '#size' => 25,
    '#default_value' => $defs['sana2'],
    '#attributes' => array('title' => t('Enter the search word(s).')),
  );
  $form['haku']['laajennettu']['ehto3'] = array(
    '#type' => 'select',
    '#title' => 'Hakuehto 2',
    '#options' => $sort_options,
    '#default_value' => $defs['ehto3'],
  );
  $form['haku']['laajennettu']['sana3'] = array(
    '#type' => 'textfield',
    '#size' => 25,
    '#default_value' => $defs['sana3'],
    '#attributes' => array('title' => t('Enter the search word(s).')),
  );
  /* $form['haku']['laajennettu']['ehto4'] = array(
    '#type' => 'select',
    '#title' => 'Hakuehto 3',
    '#options' => $sort_options,
    '#default_value' => $defs['ehto4'],
    );
    $form['haku']['laajennettu']['sana4'] = array(
    '#type' => 'textfield',
    '#size' => 25,
    '#default_value' => $defs['sana4'],
    '#attributes' => array('title' => t('Enter the search word(s).')),
    ); */
  $form['haku']['laajennettu']['jvtitle'] = array(
    '#type' => 'item',
    '#title' => 'Julkaisuvuosi',
  );
  $form['haku']['laajennettu']['inline'] = array(
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>'
  );
  $form['haku']['laajennettu']['inline']['julkaisuvuosi1'] = array(
    '#type' => 'textfield',
    '#size' => 5,
    '#default_value' => $defs['julkaisuvuosi1'],
    '#attributes' => array('title' => t('Enter the search word(s).')),
  );
  $form['haku']['laajennettu']['inline']['jv'] = array(
    '#type' => 'markup',
    '#value' => '&nbsp;-&nbsp;'
  );
  $form['haku']['laajennettu']['inline']['julkaisuvuosi2'] = array(
    '#type' => 'textfield',
    '#size' => 5,
    '#default_value' => $defs['julkaisuvuosi2'],
    '#attributes' => array('title' => t('Enter the search word(s).')),
  );
  // Material type condition not implemented, because query format is not yet known
//  $sort_options = array('Kaikki', 'Kirja', 'Videotallenne', 'Artikkeli', 'Atk-tallenne', 'Elektroninen aineisto');
//  $form['haku']['laajennettu']['aineisto'] = array(
//    '#type' => 'select',
//    '#title' => 'Aineistotyyppi',
//    '#options' => $sort_options,
//    '#default_value' => $defs['aineisto'],
//    '#length' => 5,
//  );
  $sort_options = array('Tekijä ja nimeke', 'Nimeke', 'Julkaisuvuosi');
  $form['haku']['laajennettu']['jarjesta'] = array(
    '#type' => 'select',
    '#title' => 'Järjestys',
    '#options' => $sort_options,
    '#default_value' => $defs['jarjesta'],
  );

  $form['haku']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Hae'
  );
  $form['haku']['clear'] = array(
    '#type' => 'submit',
    '#value' => 'Tyhjennä'
  );
  return $form;
}

/**
 * Implements hook_submit().
 */
function kldb_search_form_submit($form, &$form_state) {
  $ret = '';
  if ($form_state['values']['op'] !== 'Tyhjennä') {
    if (isset($form_state['values']['sana1']) && !empty($form_state['values']['sana1'])) {
      $ret .= '/' . $form_state['values']['sana1'];
    }
    if (isset($form_state['values']['sana2']) && !empty($form_state['values']['sana2'])) {
      $ret .= '/';
      $ret .= _kldb_get_condition($form_state['values']['ehto2']);
      $ret .= $form_state['values']['sana2'];
    }
    if (isset($form_state['values']['sana3']) && !empty($form_state['values']['sana3'])) {
      $ret .= '/';
      $ret .= _kldb_get_condition($form_state['values']['ehto3']);
      $ret .= $form_state['values']['sana3'];
    }
    /* if (isset($form_state['values']['sana4']) && !empty($form_state['values']['sana4'])) {
      $ret .= '/';
      $ret .= _kldb_get_condition($form_state['values']['ehto4']);
      $ret .= $form_state['values']['sana4'];
      } */
    if (isset($form_state['values']['julkaisuvuosi1']) &&
        !empty($form_state['values']['julkaisuvuosi1'])) {
      $ret .= '/date>=' . $form_state['values']['julkaisuvuosi1'] . '-01-01';
    }
    if (isset($form_state['values']['julkaisuvuosi2']) &&
        !empty($form_state['values']['julkaisuvuosi2'])) {
      $ret .= '/date<=' . $form_state['values']['julkaisuvuosi2'] . '-12-31';
    }
    if (!empty($ret)) {
      $order = array('author and title', 'title', 'date');
      if (isset($form_state['values']['jarjesta'])) {
        $ret .= '/sort=' . $order[$form_state['values']['jarjesta']];
      }
    }
  }
  $form_state['redirect'] = 'kltietokanta' . $ret;
}

/**
 * Result page composing.
 *
 * @param stirng $swords search word
 * @return string html marking for page
 */
function kldb_page($swords = '') {
  if (!isset($_POST['form_id'])) { // Form submitted
    if (empty($swords)) {
      return theme('box', '', kldb_get_info_txt()) . kldb_add_footer();
    }

    $page = kldb_ask_page($swords, arg());
    if ($page === FALSE) {
      return theme('box', '', '') . kldb_add_footer();
    }
    $xml = new SimpleXMLElement($page);
    $result = kldb_extract_data($xml);

    $vars = $result['searchRetrieveResponse'];
    $found = $vars['numberOfRecords'];
    if ($found > 0) {
      $pageFirst = $vars['echoedRequest']['startRecord'];
      $pageMax = $vars['echoedRequest']['maximumRecords'];
      if ($found == 1) {
        $output = 'Hakusi tuotti 1 tuloksen';
      }
      else {
        $output = 'Hakusi tuotti ' . $found . ' tulosta.';
      }
      if ($found > $pageMax) {
        $output .= kldb_crete_navigation($found, $pageFirst, $pageMax);
      }
      foreach ($vars['records'] as $value) {
        $rows[] = kldb_create_data_row($value);
      }
      return $output . theme('table', NULL, $rows) . kldb_add_footer();
    }
    else {
      return theme('box', '', 'Hakusi ei tuottanut tuloksia') . kldb_add_footer();
    }
  }
  return theme('box', '', '') . kldb_add_footer();
}

/**
 * Page for showing chosen reference's detailed information.
 *
 * @param stirng $ref id for reference
 * @return string html marking for page
 */
function kldb_reference_page($ref = NULL) {
  if ($ref === NULL) {
    drupal_goto('kltietokanta');
  }
  $page = kldb_ask_page($ref, arg(), 'titleid=');
  if ($page === FALSE) {
    return theme('box', '', '');
  }

  $output = '<p><a href="javascript:history.go(-1)">Takaisin hakutulokseen</a></p>';

  $xml = new SimpleXMLElement($page);
  $result = kldb_extract_data($xml);
  $var = $result['searchRetrieveResponse']['records'][0]['recordData'];
  $header = array(array('data' => '', 'colspan' => 2)); // Shows still table's upper border
  $row_data = _kldb_create_title($var, FALSE);
  if (!empty($row_data)) {
    $rows[] = array(array('data' => 'Nimeke: ', 'align' => 'right', 'class' => 'kldb-ref'), $row_data);
  }
  if (isset($var['data']['041'])) {
    $row_data = kldb_convert_lang($var['data']['041'], 'a');
    if (!empty($row_data)) {
      $rows[] = array(array('data' => 'Kielet: ', 'align' => 'right'), $row_data);
    }
  }
  $type = kldb_add_type($var['leader']);
  if (!empty($type)) {
    $rows[] = array(array('data' => 'Aineistotyyppi: ', 'align' => 'right'), $type);
  }
  if (isset($var['data']['100'])) {
    $name = kldb_get_cell_value($var['data']['100'], 'a');
    $row_data = l(kldb_convert_entities($name), 'kltietokanta/author=' . $name);
    if (!empty($row_data)) {
      $rows[] = array(array('data' => 'Pääkirjaus tekijästä: ', 'align' => 'right'), $row_data);
    }
  }
  // Yhteisötekijä jos löytyy 110a
  if (isset($var['data']['110'])) {
    $row_data = kldb_get_cell_value($var['data']['110'], 'a');
    if (!empty($row_data)) {
      $rows[] = array(array('data' => 'Yhteisötekijä: ', 'align' => 'right'), $row_data);
    }
  }
  elseif (isset($var['data']['710'])) {
    $row_data = kldb_get_cell_value($var['data']['710'], 'a');
    if (!empty($row_data)) {
      $rows[] = array(array('data' => 'Yhteisötekijä: ', 'align' => 'right'), $row_data);
    }
  }
  if (isset($var['data']['700'])) {
    $row_data = kldb_make_links($var['data']['700'], 'a', 'author=');
    if (!empty($row_data)) {
      $rows[] = array(array('data' => 'Lisäkirjaus tekijöistä: ', 'align' => 'right'), $row_data);
    }
  }
  if (isset($var['data']['245'])) {
    // 245d; 245e
    $row_data = kldb_get_cell_value($var['data']['245'], 'd');
    $row_data2 = kldb_get_cell_value($var['data']['245'], 'e');
    if (!empty($row_data) && !empty($row_data2)) {
      $row_data .= '; ' . $row_data2;
    }
    else {
      $row_data .= $row_data2;
    }
    if (!empty($row_data)) {
      $rows[] = array(array('data' => 'Tekijät: ', 'align' => 'right'), $row_data);
    }
  }
  if ($type == 'Artikkeli') {
    if (isset($var['data']['260'])) {
      $row_data = kldb_get_cell_value($var['data']['260'], 'c');
      if (!empty($row_data)) {
        $rows[] = array(array('data' => 'Julkaisutiedot: ', 'align' => 'right'), $row_data);
      }
    }
    $row_data = _kldb_create_a_publication($var);
  }
  else {
    $row_data = _kldb_create_publication_data($var);
    if (!empty($row_data)) {
      $rows[] = array(array('data' => 'Julkaisutiedot: ', 'align' => 'right'), $row_data);
    }
    $row_data = _kldb_create_outfit($var);
    if (!empty($row_data)) {
      $rows[] = array(array('data' => 'Ulkoasu: ', 'align' => 'right'), $row_data);
    }
    $row_data = _kldb_create_isbn($var);
    if (!empty($row_data)) {
      $rows[] = array(array('data' => 'ISBN: ', 'align' => 'right'), $row_data);
    }
    $row_data = _kldb_create_publication_series($var);
  }
  if (!empty($row_data)) {
    $rows[] = array(array('data' => 'Julkaisusarja: ', 'align' => 'right'), $row_data);
  }
  if (isset($var['data']['538'])) {
    $row_data = kldb_get_cell_value($var['data']['538'], 'a');
    if (!empty($row_data)) {
      $rows[] = array(array('data' => 'Järjestelmävaatimukset: ', 'align' => 'right'), $row_data);
    }
  }
  // Elektronisen aineiston tiedot ???
  if (isset($var['data']['258'])) {
    $row_data = kldb_get_cell_value($var['data']['258'], 'a');
    if (!empty($row_data)) {
      $rows[] = array(array('data' => 'Tyyppi: ', 'align' => 'right'), $row_data);
    }
  }

  if (isset($var['data']['500'])) {
    $row_data = kldb_get_cell_value($var['data']['500'], 'a');
    if (!empty($row_data)) {
      $rows[] = array(array('data' => 'Huomautus: ', 'align' => 'right'), $row_data);
    }
  }

  if (isset($var['data']['653'])) {
    $row_data = kldb_make_links($var['data']['653'], 'a');
    if (!empty($row_data)) {
      $rows[] = array(array('data' => 'Asiasanat: ', 'align' => 'right'), $row_data);
    }
  }
  $row_data = _kldb_create_link_2_work($var);
  if (!empty($row_data)) {
    $docs = theme('table', array('Linkki'), array(array($row_data)));
  }

  $output .= theme('table', $header, $rows, array('class' => 'kldb-ref-table'));
  $output .= $docs;

  $output .= kldb_add_footer();

  return $output;
}

/**
 * Get one row from XML data
 *
 * @param SimpleXML $sxml source
 * @param string $ns namespace
 * @return array result
 */
function kldb_get_row_data($sxml, $ns) {
  $items = $sxml->children($ns);
  $ret = array();
  foreach ($items as $item) {
    $ret[$item->getName()] = (string) $item;
  }
  return $ret;
}

/**
 * Extract the actual Marc data fron XML
 *
 * @param SimpleXML $item source
 * @return array result
 */
function kldb_get_data($item) {
  $rows = array();
  foreach ($item->record as $my_rec) {
    $row = array();
    foreach ($my_rec->children('srw', TRUE) as $rec) {
      $name = $rec->getName();
      if ($name === 'recordData') {
        $row[$name] = kldb_get_rows($rec);
      }
      else {
        $row[$name] = (string) $rec;
      }
    }
    $rows[] = $row;
  }
  return $rows;
}

/**
 * Return one MARC data row.
 *
 * @param SimpleXML $rows source
 * @return array result
 */
function kldb_get_rows($rows) {
  $cell = array();
  foreach ($rows->children()->children() as $r) {
    $name = $r->getName();
    if ($name === 'controlfield') {
      $ctrl = kldb_get_attributes($r);
      $ctrl = array_merge(array('arvo' => (string) $r), $ctrl);
      $cell['control'][$ctrl['tag']][] = $ctrl;
    }
    elseif ($name === 'datafield') {
      $dfld = kldb_get_attributes($r);
      foreach ($r->subfield as $sctl) {
        $subd = kldb_get_attributes($sctl);
        $subd = array_merge(array('arvo' => (string) $sctl), $subd);
        $dfld['sub'][] = $subd;
      }
      $cell['data'][$dfld['tag']][] = $dfld;
    }
    else {
      $cell[$name] = (string) $r;
    }
  }
  return $cell;
}

/**
 * Extracts source's attributes.
 *
 * @param SimpleXML $data source
 * @return array attributes
 */
function kldb_get_attributes($data) {
  $attribs = array();
  foreach ($data->attributes() as $att) {
    $attribs[(string) ($att->getName())] = (string) $att;
  }
  return $attribs;
}

/**
 * Start data extraction
 *
 * @param SimpleXML $xml source
 * @return array result
 */
function kldb_extract_data($xml) {
  $namespaces = $xml->getDocNamespaces();
  $child = $xml->children('http://www.loc.gov/zing/srw/');
  foreach ($child as $item) {
    $name = $item->getName();
    if ($name === 'records') {
      $data[$name] = kldb_get_data($item);
    }
    elseif ($name === 'diagnostics') {
      $diag = $child->diagnostics->children($namespaces['diag']);
      $data[$name] = kldb_get_row_data($diag->diagnostic, $namespaces['diag']);
    }
    elseif ($name === 'echoedRequest') {
      $data[$name] = kldb_get_row_data($child->echoedRequest, $namespaces['srw']);
    }
    else {
      if (!empty($item)) {
        $data[$name] = (string) $item;
      }
    }
  }
  return array($xml->getName() => $data);
}

/**
 * Find out the data type of current material
 *
 * @param atring $data
 * @return string type of the material
 */
function kldb_add_type($data) {
  $ret = '';
  $type = substr($data, 6, 1);
  $sub_type = substr($data, 7, 1);
  if ($type === 'a') {
    if ($sub_type === 'b') {
      $ret = 'Artikkeli';
    }
    elseif ($sub_type === 'm') {
      $ret = 'Kirja';
    }
  }
  else if ($type === 'm') {
    $ret = 'Elektroninen aineisto';
  }
  else if ($type === 'g') {
    $ret = 'Videotallenne';
  }
  return $ret;
}

/**
 * Make the query and send it to the server.
 *
 * @param string $swords freesearch word
 * @param array $arg other search conditions
 * @param string $type is detailed reference query
 * @return mixed result string or false if failed
 */
function kldb_ask_page($swords, $arg = NULL, $type = NULL) {
  $srec = 1;
  $crec = 50;
  if ($type === NULL) {
    $query = _kldb_create_query($swords, $arg);
  }
  else {
    $query = kldb_get_query($swords, $type);
  }
  $sort = kldb_get_part($arg, 'sort=', 'date');
  $srec = kldb_get_part($arg, 'firstrec=', '1');
  $server = 'kymenlaakso.prettybit.fi';
  $page = '/sru/1/' .
      'searchRetrieve?' .
      'operation=searchRetrieve&' .
      'startRecord=' . $srec . '&' .
      'sortKeys=' . $sort . '&' .
      'query=' . $query . '&' .
      'recordSchema=info:srw/schema/1/marcxml-v1.1&' .
      'maximumRecords=' . $crec . '&' .
      'stylesheet=&' .
      'hae=Hae';
  @$fp = fsockopen($server, 80, $errno, $errstr, 30);
  if ($fp !== FALSE) {
    $out = "GET /" . $page . " HTTP/1.1\r\n";
    $out .= "Host: " . $server . "\r\n";
    $out .= "Connection: Close\r\n\r\n";
    fwrite($fp, $out);
    while (!feof($fp)) {
      $homepage .= fgets($fp, 128);
    }
    fclose($fp);
    $page_parts = explode('<?xml', $homepage);
    if (count($page_parts) > 1) {
      $homepage = '<?xml' . $page_parts[1];
    }
    else {
      if (strpos($homepage, '<diagnostics>') !== FALSE) {
        $page_parts = explode('<diagnostics>', $homepage);
        $homepage = '<?xml version="1.0" encoding="utf-8" ?><diagnostics>' . $page_parts[1];
        $xml = new SimpleXMLElement($homepage);
        $diag = $xml->diagnostic->children();
        $msg = 'Message: ' . (string) $diag->message . '<br />';
        $msg .= 'Detals: ' . (string) $diag->details . '<br />';
        drupal_set_message('Message error<br />' . $msg, 'error');
      }
      $homepage = FALSE;
    }
    return $homepage;
  }
  else {
    watchdog('kldb', 'HTML page error; errno: ' . $errno . ', message: ' . $errstr);
  }
  return FALSE;
}

/**
 * Detailed reference query
 *
 * @param string $words search word
 * @param string $type query type
 * @return string query string
 */
function kldb_get_query($words, $type = 'any=') {
  if (strpos($words, '=') !== false) {
    return $words;
  }
  $parts = explode(' ', $words);
  $ret = '';
  foreach ($parts as $part) {
    if (!empty($ret)) {
      $ret .= ' AND ';
    }
    $ret .= $type . $part;
  }
  return $ret;
}

/**
 * Find out if given query part is determined in argument list.
 *
 * @param array $arg argument list
 * @param string $find query part to find
 * @param string $def default value
 * @return string query string
 */
function kldb_get_part($arg, $find, $def) {
  $ret = $def;
  if ($arg !== NULL && count($arg) > 1) {
    for ($i = 2; $i < count($arg); $i++) {
      $parts = explode($find, $arg[$i]);
      if (count($parts) > 1) {
        $ret = $parts[1];
        break;
      }
    }
  }
  return $ret;
}

/**
 * Create's navigation across query result.
 *
 * @param int $found number of founded
 * @param int $pageFirst page first record number
 * @param int $pageMax max records per page
 * @return string html marking
 */
function kldb_crete_navigation($found, $pageFirst, $pageMax) {
  $output .= '<br />';
  $output .= 'Näytetään tulokset ' . ($pageFirst) . ' - ';
  $output .= ( $pageFirst + $pageMax - 1) < $found ? ($pageFirst + $pageMax - 1) : $found;
  $output .= '.<br />';
  $address = '';
  $cur_pages = (int) ($found / $pageMax) + 1;
  $cur_page = (int) ($pageFirst / $pageMax) + 1;
  foreach (arg() as $value) { // Remove 'firstrec' definition
    if (strpos($value, 'firstrec=') !== FALSE) {
      continue;
    }
    $address .= $value . '/';
  }
  if ($pageFirst > 1) {
    $output .= l('« ensimmäinen ', $address . 'firstrec=1') . ' ';
  }
  if ($cur_page - 5 > 0) {
    $output .= ' ... ';
  }
  $nav_start = ($cur_page - 4) < 1 ? 1 : $cur_page - 4;
  $nav_end = $cur_pages > 9 ? $nav_start + 9 : $cur_pages + 1;
  if ($nav_end > $cur_pages) {
    $nav_start = $cur_pages - 8 < 1 ? 1 : $cur_pages - 8;
    $nav_end = $cur_pages + 1;
  }
  for ($i = $nav_start; $i < $nav_end; $i++) {
    $a = ($i - 1) * $pageMax + 1;
    if ($a == $pageFirst) {
      $output .= '<strong>' . $i . '</strong> ';
    }
    else {
      $output .= l($i, $address . 'firstrec=' . ((int) $a)) . ' ';
    }
  }
  if ($cur_page + 4 < $cur_pages) {
    $output .= ' ... ';
  }
  if ($pageFirst + $pageMax < $found) {
    $output .= l(' viimeinen »', $address . 'firstrec=' . (($cur_pages - 1) * $pageMax + 1)) . ' ';
  }
  return $output;
}

/**
 * Convert HTML entities to actual characters.
 *
 * @param string $text source
 * @return string string converted string
 */
function kldb_convert_entities($text) {
  return mb_convert_encoding($text, 'UTF-8', 'HTML-ENTITIES');
}

/**
 * Return given MARC record chosen value
 *
 * @param string $data MARC record
 * @param string $cell MARC record cell
 * @return string result
 */
function kldb_get_cell_value($data, $cell, $delim = '; ') {
  $ret = '';
  foreach ($data as $value) {
    foreach ($value['sub'] as $sub) {
      if ($sub['code'] == $cell) {
        if (!empty($ret)) {
          $ret .= $delim;
        }
        $ret .= $sub['arvo'];
      }
    }
  }
  return $ret;
}

/**
 * Return given MARC record indicator
 *
 * @param string $data MARC control record
 * @param string $ind record indicator
 * @return string result
 */
function kldb_get_cell_indicator($data, $ind) {
  if (count($data) === 1) {
    if(isset($data[0]['ind' . $ind])) {
      return $data[0]['ind' . $ind];
    }
    else {
      return "";
    }
  }
  return '';
}

/**
 * Create subject links
 *
 * @param string $data MARC record
 * @param string $cell MARC record cell
 * @return string result
 */
function kldb_make_links($data, $cell, $target = 'subject=') {
  $ret = '';
  $erotin = $target == 'subject=' ? ', ' : '; ';
  foreach ($data as $value) {
    foreach ($value['sub'] as $sub) {
      if ($sub['code'] == $cell) {
        if (!empty($ret)) {
          $ret .= $erotin;
        }
        $text = trim(kldb_convert_entities($sub['arvo']));
        $ret .= l($text, 'kltietokanta/' . $target . $text);
      }
    }
  }
  return $ret;
}

/**
 * Convert language codes to language names
 *
 * @param string $data MARC record
 * @param string $cell MARC record cell
 * @return string result
 */
function kldb_convert_lang($data, $cell) {
  $lang = kldb_get_cell_value($data, 'a');
  return str_replace(
          array('fin', 'swe', 'eng', 'ger', 'rus', 'chn'), array('Suomi', 'Ruotsi', 'Englanti', 'Saksa', 'Venäjä', 'Kiina'), $lang);
}

/**
 * Convert search conndition number to name
 *
 * @param int $cond search condition number
 * @return string name
 */
function _kldb_get_condition($cond) {
  $ret = '';
  switch ($cond) {
    case 0:
      $ret .= 'dc.subject=';
      break;
    case 1:
      $ret .= 'dc.author=';
      break;
    case 2:
      $ret .= 'dc.title=';
      break;
    case 3:
      $ret .= 'dc.publisher='; // ???
      break;
    case 4:
      $ret .= 'dc.isbn=';
      break;
    case 5:
      $ret .= 'dc.series=';
      break;
    default: $ret = 'dc.any=';
  }
  return $ret;
}

/**
 * Compose search result row accoring to type.
 *
 * @param array $value one record
 * @return string html marking
 */
function kldb_create_data_row($value) {
  $type = kldb_add_type($value['recordData']['leader']);
  $str = _kldb_create_title($value['recordData']);
  $a .= _kldb_create_author($value['recordData']);
  if (!empty($a)) {
    $str .= $a . '<br />';
  }
  switch ($type) {
    case 'Artikkeli':
      $ret = $type;
      $str .= _kldb_create_a_publication($value['recordData']) . '<br />';
      $str .= '<br />'; // Kuuluko tässä olla jokin tieto?
      $str .= $type . '<br />';
      break;
    case 'Kirja':
      $str .= _kldb_create_b_publication($value['recordData']) . '<br />';
//      $str .= _kldb_create_isbn($value['recordData']) . '<br />';
      $str .= $type . '<br />';
      $str .= _kldb_create_link_2_work($value['recordData']);
      break;
    case 'Videotallenne':
    case 'Elektroninen aineisto':
      $str .= _kldb_create_e_publication($value['recordData']) . '<br />';
//      $str .= _kldb_create_isbn($value['recordData']) . '<br />';
      $str .= $type . '<br />';
      $str .= _kldb_create_link_2_work($value['recordData']);
      break;
    default:
      $str = '';
      break;
  }
  return array($str);
}

/**
 * Create result title.
 *
 * @param array $data source
 * @param boolean $do_link is link
 * @return string html marking
 */
function _kldb_create_title($data, $do_link = TRUE) {
  $title = kldb_get_cell_value($data['data']['245'], 'a');
  $a = kldb_get_cell_value($data['data']['245'], 'b', ' : ');
  if (!empty($a)) {
    $title .= ' : ' . $a;
  }
  if ($do_link === FALSE) {
    return $title;
  }
  $title = kldb_convert_entities($title);
  $id = (int) substr($data['control']['001'][0]['arvo'], 2);
  return '<strong>' . l($title, 'kltietokanta/klviite/' . $id) . '</strong><br />';
}

/**
 * Create author data
 *
 * @param array $data source
 * @return string html marking
 */
function _kldb_create_author($data) {
  $str = kldb_get_cell_value($data['data']['245'], 'd');
  $e = kldb_get_cell_value($data['data']['245'], 'e');
  if (!empty($e)) {
    if (!empty($str)) {
      $str .= ' ; ';
    }
    $str .= $e;
  }
  return $str;
}

/**
 * Create article publication data
 *
 * @param array $data source
 * @return string html marking
 */
function _kldb_create_a_publication($data) {
  $str = '';
  if (isset($data['data']['810'])) {
    $str .= kldb_get_cell_value($data['data']['810'], 't');
  }
  if (isset($data['data']['490'])) {
    $str .= kldb_get_cell_value($data['data']['490'], 'a');
  }
  if (isset($data['data']['260'])) {
    $str .= ' ';
    $str .= kldb_get_cell_value($data['data']['260'], 'c');
  }
  if (isset($data['data']['490'])) {
    $a = kldb_get_cell_value($data['data']['490'], 'v');
    if (!empty($a)) {
      $str .= '; (';
      $str .= $a;
      $str .= '): ';
    }
  }
  if (isset($data['data']['300'])) {
    $str .= kldb_get_cell_value($data['data']['300'], 'a');
    if (!isset($data['data']['490'])) {
      $a = kldb_get_cell_value($data['data']['300'], 'b');
      if (!empty($a)) {
        $str .= ' : ' . $a;
      }
    }
  }
  return $str;
}

/**
 * Create book publication data.
 *
 * @param array $data source
 * @return string html marking
 */
function _kldb_create_b_publication($data) {
  $str = _kldb_create_publication_data($data);
  $a = kldb_get_cell_value($data['data']['300'], 'a');
  if (!empty($a)) {
    $str .= '. - ' . $a;
  }
  $a = _kldb_create_publication_series($data);
  if (!empty($a)) {
    $str .= '<br />' . $a;
  }
  $str .= '<br />';
  return $str;
}

/**
 * Create publication data to the rest types.
 *
 * @param array $data source
 * @return string html marking
 */
function _kldb_create_e_publication($data) {
  $str = _kldb_create_publication_data($data);
//  $str .= '. - ';
//  $str .= _kldb_create_outfit($data);
  $a .= _kldb_create_publication_series($data);
  if (!empty($a)) {
    $str .= '<br />' . $a;
  }
  $str .= '<br />';
  return $str;
}

/**
 * Create ISBN data
 *
 * @param array $data source
 * @return string html marking
 */
function _kldb_create_isbn($data) {
  $str = '';
  if (isset($data['data']['020'])) {
    $a = trim(kldb_get_cell_value($data['data']['020'], 'a'));
    if (!empty($a)) {
      $str .= 'ISBN ' . $a;
    }
  }
  return $str;
}

/**
 * Create link to the material of reference
 *
 * @param array $data source
 * @return string html marking
 */
function _kldb_create_link_2_work($data) {
  $str = '';
  if (isset($data['data']['856'])) {
    $a = trim(kldb_get_cell_value($data['data']['856'], 'u'));
    if (!empty($a)) {
      $str .= '<a class="ext_link" href="' . $a . '" target="_blank" >' . $a . '</a>';
    }
  }
  return $str;
}

/**
 * Create publiation details
 *
 * @param array $data source
 * @return string html marking
 */
function _kldb_create_publication_data($data) {
  $str = '';
  if (isset($data['data']['260'])) {
    $str .= kldb_get_cell_value($data['data']['260'], 'a');
    $a = kldb_get_cell_value($data['data']['260'], 'b');
    if (!empty($str) && !empty($a)) {
      $str .= ' : ' . $a;
    }
    else {
      $str .= $a;
    }
    $a = kldb_get_cell_value($data['data']['260'], 'c');
    if (!empty($str) && !empty($a)) {
      $str .= ', ' . $a;
    }
    else {
      $str .= $a;
    }
  }
  return $str;
}

/**
 * Create data of material outfit
 *
 * @param array $data source
 * @return string html marking
 */
function _kldb_create_outfit($data) {
  $str = '';
  if (isset($data['data']['300'])) {
    $d300 = kldb_get_cell_value($data['data']['300'], 'z');
    $a .= kldb_get_cell_value($data['data']['300'], 'a');
    if (!empty($a) && !empty($d300)) {
      $d300 .= ' : ';
    }
    $d300 .= $a;
    $a = kldb_get_cell_value($data['data']['300'], 'b');
    if (!empty($a) && !empty($d300)) {
      $d300 .= ' : ';
    }
    $str .= $d300 . $a;
  }
  return $str;
}

/**
 * Create publication series data
 *
 * @param array $data source
 * @return string html marking
 */
function _kldb_create_publication_series($data) {
  $str = '';
  if (isset($data['data']['490'])) {
    $ind = kldb_get_cell_indicator($data['data']['490'], 1);
    if (isset($data['data']['810'])) {
      $str .= kldb_get_cell_value($data['data']['810'], 't');
      $a = kldb_get_cell_value($data['data']['810'], 'n');
      if (!empty($a)) {
        $str .= '. ' . $a;
      }
      $str .= ', ISSN ';
      $str .= kldb_get_cell_value($data['data']['810'], 'x');
      $str .= ' ; ';
      $str .= kldb_get_cell_value($data['data']['810'], 'v');
    }
    elseif (isset($data['data']['830'])) {
      $str = kldb_get_cell_value($data['data']['830'], 'a');
      $str .= ', ISSN ';
      $str .= kldb_get_cell_value($data['data']['830'], 'x');
      $str .= ' ; ';
      $str .= kldb_get_cell_value($data['data']['830'], 'v');
    }
    else {
      // Data 490:stä?
    }
  }
  return $str;
}

/**
 * Create search form conditions default values, taking notice allready
 * set search values
 *
 * @param array $args search arguments
 * @return array default values
 */
function _kldb_create_form_defaults($args) {
  $ret = array(
    'sana1' => '',
    'adv_close' => TRUE,
    'sana2' => '',
    'ehto2' => 6, // 6 = Vapaasana
    'sana3' => '',
    'ehto3' => 6, // 
    /*    'sana4' => '',
      'ehto4' => 5, // 5 = Sarja */
    'julkaisuvuosi1' => '',
    'julkaisuvuosi2' => '',
    'aineisto' => 0, // 0 = Kaikki
    'jarjesta' => 2, // 2 = Julkaisuvuosi
  );
  if ($args[0] == 'kltietokanta' && $args[1] != 'klviite') {
    array_shift($args);
    if (count($args) == 0) {
      return $ret; // Only page address
    }
    if (strpos($args[0], '=') === FALSE) {
      $ret['sana1'] = $args[0];
      array_shift($args);
    }
    if (count($args) == 1 && $args[0] == 'sort=date') {
      return $ret; // Only freeword search and order
    }
    if (count($args) == 2 && $args[0] == 'sort=date' && strpos($args[1], 'firstrec=') !== FALSE) {
      return $ret; // Only freeword search order and page definition
    }
    $ret['adv_close'] = FALSE;
    $cond_nro = 2; // Start with 2, because sana1 is freeword search
    foreach ($args as $arg) {
      $cond_val = 0;
      $val = explode('=', $arg);
      switch ($val[0]) {
        case 'sort' :
          switch ($val[1]) {
            case 'title':
              $ret['jarjesta'] = 0;
              break;
            case 'author and title':
              $ret['jarjesta'] = 1;
              break;
            default:
              $ret['jarjesta'] = 2;
              break;
          }
          break;
        case 'dc.any' :
          $cond_val++;
        case 'dc.series' :
          $cond_val++;
        case 'dc.isbn' :
          $cond_val++;
        case 'dc.publisher' :
          $cond_val++;
        case 'dc.title' :
          $cond_val++;
        case 'dc.author' :
          $cond_val++;
        case 'dc.subject' :
          $ret['sana' . $cond_nro] = $val[1];
          $ret['ehto' . $cond_nro] = $cond_val;
          $cond_nro++;
          break;
        case 'date<' :
          $ret['julkaisuvuosi2'] = substr($val[1], 0, 4);
          break;
        case 'date>' :
          $ret['julkaisuvuosi1'] = substr($val[1], 0, 4);
          break;
        default :
          break;
      }
    }
  }
  return $ret;
}

/**
 * Create basic query from given conditions.
 *
 * @param string $words freesearch word
 * @param array $arg other search conditions
 * @return string auery
 */
function _kldb_create_query($word, $args) {
  // TODO  Hakuehdoissa voi jo olla JA/TAI/EI (AND/OR/NOT) operaattoreita
  // ne on huomioitava ennen kuin välilyönti korvataan AND-operaattorilla.
  //
  $oper = array('AND', 'OR', 'NOT', 'JA', 'TAI', 'EI');
  array_shift($args);
  if (strpos($word, '=') === FALSE) {
    // Only freeword given
    $args[0] = 'dc.any=' . $word;
  }
  $ret = '';
  foreach ($args as $arg) {
    if (strpos($arg, 'sort=') !== FALSE || strpos($arg, 'firstrec=') !== FALSE) {
      continue; // No handling for 'sort'
    }
    if (!empty($ret)) {
      $ret .= ' and ';
    }
    if (strpos($arg, 'dc.subject=') !== FALSE ||
        strpos($arg, 'dc.date') !== FALSE ||
        strpos($arg, 'dc.author=') !== FALSE ||
        strpos($arg, 'dc.any=') !== FALSE) {
      $awords = explode('=', $arg);
      $ret .= $awords[0] . '=' . _kldb_clear_unwanted($awords[1]);
    }
    else {
      $awords = explode(' ', $arg);
      if (($acnt = count($awords) - 1) > 0) {
        $ret = $awords[0];
        for ($i = 1; $i <= $acnt; $i++) {
          $my_oper = strtoupper($awords[$i]);
          if (in_array($my_oper, $oper)) {
            $my_oper = str_replace(
                array('JA', 'TAI', 'EI'), array('AND', 'OR', 'NOT'), $my_oper);
            $ret .= ' ' . $my_oper . ' ' . $awords[$i + 1];
            $i++;
          }
          else {
            $ret .= ' AND ' . $awords[$i];
          }
        }
      }
      else {
        $ret = $arg;
      }
    }
  }
  return $ret;
}

function kldb_add_footer() {
  return check_markup(variable_get('kldb_footer', '<br />Tietokantaa julkaisee ' .
              l('Kouvolan kaupunginkirjasto-maakuntakirjasto', 'Kouvola-library-information')));
//  return '<br />Tietokantaa julkaisee ' .
//  '<a href="http://www.kyyti.fi/Kouvola-library-information">' .
//  'Kouvolan kaupunginkirjasto-maakuntakirjasto</a>';
}

/**
 * Luo asetussivun aloitustekstin syöttämiseen.
 */
function kldb_admin_page() {
  $form = array();
  $form['kldb_info'] = array(
    '#title' => 'Esittely teksti',
    '#type' => 'textarea',
    '#description' => 'Teksti joka näytetään sivulla kun ei hakutuloksia.',
    '#rows' => 5,
    '#default_value' => kldb_get_info_txt(),
  );
  $form['kldb_extra'] = array(
    '#title' => 'Lisäteksti',
    '#type' => 'textarea',
    '#description' => 'Tähän voi kirjoittaa esimerkiksi hakuohjeita tai lisätä linkkejä.',
    '#rows' => 5,
    '#default_value' => check_markup(variable_get('kldb_extra', '')),
  );
  $form['kldb_footer'] = array(
    '#title' => 'Alatunniste',
    '#type' => 'textarea',
    '#description' => 'Kymenlaakso-tietokanta sivun alatunniste.',
    '#rows' => 2,
    '#default_value' => check_markup(variable_get('kldb_footer', '')),
  );
  $form['kldb_unwant'] = array(
    '#title' => 'Haussa huomiotta jätettävät sanat',
    '#type' => 'textarea',
    '#description' => 'Sanat joita ei huomioda hakuehdossa, niiden esiintyessä muiden sanajen yhteydessä. Yksin esiintyessään toimivat hakuehtona. Yksi sana riviä kohden. Viimeisen sanan jälkeen ei saa lisätä rivinvaihtoa.',
    '#rows' => 5,
    '#default_value' => check_plain(variable_get('kldb_unwant', '')),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_perm().
 */
function kldb_perm() {
  return array('administer kymenlaakso db');
}

/**
 * Hakee tietokannasta aloitus tekstin. Palautettavasta teksistä
 * poistetaan html merkkaukset.
 *
 * @return string checked info text string
 */
function kldb_get_info_txt() {
  $k_info = 'Kymenlaakso-tietokantaan tallennetaan Kymenlaakson maakuntaa, ' .
      'sen kuntia, historiaa, luontoa, järjestöjä ja ihmisiä koskevia viitteitä.';
  return check_markup(variable_get('kldb_info', $k_info));
}

/**
 * Removes unwanted words from query. Unwanted words
 * come from setting form list.
 *
 * @param string $words current search words
 * @return string modified search query 
 */
function _kldb_clear_unwanted($words) {
//  $word_list = array('ry', 'ja', 'och', 'ry.');
  $word_list = explode("\r\n", check_plain(variable_get('kldb_unwant', '')));
  $ret_word = '';
  $my_words = explode(' ', $words);
  $last_word = count($my_words) - 1;
  if ($last_word > 0) {
    $phrases[] = array();
    $p_cnt = 0;
    $phrases[0] = ''; 
    foreach ($my_words as $ind => $my_word) {
      if (in_array($my_word, $word_list)) {
        $p_cnt++;
        $phrases[$p_cnt] = ''; 
      }
      else {
        $phrases[$p_cnt] .= $my_word . ' '; 
      }
    }
    foreach ($phrases as $phrase) {
      if(empty($phrase)) {
        continue;
      }
      if(!empty($ret_word)) {
        $ret_word .= ' AND ';
      }
      if( str_word_count($phrase) == 1 ) {
        $ret_word .= trim($phrase);
      }
      else {
        $ret_word .= '"' . trim($phrase) . '"';
      }
    }
  }
  if (empty($ret_word)) {
    $ret_word = $words;
  }
  return $ret_word;
}

